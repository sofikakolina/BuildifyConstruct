generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  PrivateOwner
  Executer
  Designer
  Architect
  Buyer
  Client
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  firstName      String
  lastName       String
  accounts       Account[]
  sessions       Session[]
  nickName       String?    @unique
  email          String?    @unique
  emailVerified  DateTime?  @map("email_verified")
  hashedPassword String?
  image          String?
  role           Role       @default(Executer)
  // receivedMessages Message[]  @relation("ReceiverMessages")

  VerificationToken VerificationToken[]
  
  projectId      String[]
  project        Project[] @relation("UserProjects")
  tasks          Task[]    @relation("AssignedTasks")
}

model VerificationToken {
  id String @id @default(cuid())
  identifier String?
  token      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  expires    DateTime
  userId String?
  user User?  @relation(fields: [userId], references: [id])

 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id        String   @id @default(cuid())
  adminId   String?
  description   String?
  createdAt DateTime @default(now())
  name      String?
  image     String?
  userId    String[]
  users     User[]   @relation("UserProjects")
  documents Document[] // Документы, привязанные к проекту
  paymentDocuments paymentDocument[] // Документы, привязанные к проекту
  ifc       IFC[] // IFC, привязанные к проекту
  slabs     Slab[]
  columns   Column[]
  doors     Door[]
  windows   Window[]
  beams     Beam[]
  stairs    Stair[]
  railings  Railing[]
  walls     Wall[]
}

model Document {
  id        String   @id @default(cuid())
  name     String
  title     String
  path      String
  project   Project  @relation(fields: [projectId], references: [id])
  task      Task?  @relation(fields: [taskId], references: [id])
  taskId    String?
  projectId String
  createdAt DateTime @default(now())
}

model paymentDocument {
  id        String   @id @default(cuid())
  name      String
  cost      Int
  title     String
  path      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  task      Task?  @relation(fields: [taskId], references: [id])
  taskId    String?
  createdAt DateTime @default(now())
}

model IFC {
  id        String   @id @default(cuid())
  name      String
  title     String
  path      String   @unique
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String 
  createdAt DateTime @default(now())
}

model Task {
  id               String               @id @default(cuid())
  userId           String?
  projectId String?
  status           TaskStatus       @default(Todo)
  priority         OrderPriority     @default(Normal)
  name             String
  details          String?
  image            String?
  comment          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  assignedStaff    User[]            @relation("AssignedTasks")
  documents        Document[] // Документы, привязанные к проекту
  paymentDocuments paymentDocument[] // Документы, привязанные к проекту
  startDate        DateTime          @default(now())
  targetEnd        DateTime?      
}

enum TaskStatus {
  Todo
  Pause
  InProgress
  Wait
  Done
}

enum OrderPriority {
  Normal
  Rush
}

model Slab {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalVolume Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  slabs       SlabElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalVolume])
}

model SlabElement {
  id          String   @id @default(cuid())
  slabId      String
  slab        Slab     @relation(fields: [slabId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  elevation   Float?   // Для точной сортировки уровней
  volume      Float?
  area        Float?
  thickness   Float?
  material    String?
  ifcType     String?  @map("IFCType")
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("slab_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Column {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalVolume Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  columns     ColumnElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalVolume])
}

model ColumnElement {
  id          String   @id @default(cuid())
  columnId      String
  column      Column     @relation(fields: [columnId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  elevation   Float?   // Для точной сортировки уровней
  volume      Float?
  area        Float?
  thickness   Float?
  material    String?
  ifcType     String?  @map("IFCType")
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("column_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Door {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalArea   Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  doors       DoorElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalArea])
}

model DoorElement {
  id          String   @id @default(cuid())
  doorId    String
  door        Door     @relation(fields: [doorId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  elevation   Float?   // Для точной сортировки уровней
  area        Float?
  size        Float?
  height      Float?
  width       Float?
  ifcType     String?  @map("IFCType")
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("door_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Window {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalArea   Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  windows     WindowElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalArea])
}

model WindowElement {
  id          String   @id @default(cuid())
  windowId    String
  window      Window     @relation(fields: [windowId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  elevation   Float?   // Для точной сортировки уровней
  area        Float?
  size        Float?
  height      Float?
  width       Float?
  ifcType     String?  @map("IFCType")
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("window_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Beam {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalVolume   Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  windows     BeamElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalVolume])
}

model BeamElement {
  id          String   @id @default(cuid())
  beamId      String
  beam        Beam     @relation(fields: [beamId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  material    String? 
  elevation   Float?   // Для точной сортировки уровней
  volume      Float?
  size        Float?
  height      Float?
  width       Float?
  length      Float?
  ifcType     String?  @map("IFCType")
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("beam_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Stair {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalVolume Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  stairs      StairElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalVolume])
}

model StairElement {
  id          String   @id @default(cuid())
  stairId     String
  stair       Stair     @relation(fields: [stairId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  material    String? 
  elevation   Float?   // Для точной сортировки уровней
  volume      Float?
  width       Float?
  stepHeight  Float?
  stepLength  Float?
  numberOfSteps  Int?
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("stair_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model Railing {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalLength Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  railings    RailingElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalCount])
  @@index([totalLength])
}

model RailingElement {
  id          String   @id @default(cuid())
  railingId   String
  stair       Railing  @relation(fields: [railingId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  material    String? 
  elevation   Float?
  volume      Float?
  height      Float?
  length      Float?
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("railing_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}


model Wall {
  id          String        @id @default(cuid())
  name        String
  totalCount  Int           @default(0)
  totalVolume Float         @default(0)
  totalArea Float         @default(0)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id])
  railings    WallElement[]
  
  // Добавляем индексы для часто используемых полей
  @@index([totalVolume])
  @@index([totalCount])
  @@index([totalArea])
}

model WallElement {
  id          String   @id @default(cuid())
  wallId      String
  wall        Wall  @relation(fields: [wallId], references: [id])
  name        String
  globalId    String   @unique @map("GlobalId")
  type        String
  level       String? 
  materials   WallMaterial[] 
  elevation   Float?
  volume      Float?
  area        Float?
  height      Float?
  length      Float?
  width       Float?
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("wall_elements")
  @@index([level])
  @@index([elevation])
  @@index([type])
}

model WallMaterial {
  id              String      @id @default(cuid())
  wallElementId   String
  wallElement     WallElement @relation(fields: [wallElementId], references: [id])
  name            String
  type            String?
  thickness       Float?      // Толщина в мм
  volume          Float?      // Объем в м³
  area            Float?      // Площадь в м²
  elevation       Float?      // Отметка уровня
  properties      Json?       // Дополнительные свойства
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("wall_materials")
  @@index([name])
  @@index([type])
  @@index([elevation])
  @@index([wallElementId])
}