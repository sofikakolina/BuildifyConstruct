generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  PrivateOwner
  Executer
  Client
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  firstName      String
  lastName       String
  accounts      Account[]
  sessions      Session[]
  nickName       String?    @unique
  email          String?    @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?
  image          String?
  role           Role       @default(Executer)
  // receivedMessages Message[]  @relation("ReceiverMessages")

  VerificationToken VerificationToken[]
  
  projectId String[]
  project Project[] @relation("UserProjects")
}

 
model VerificationToken {
  id String @id @default(cuid())
  identifier String?
  token      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  expires    DateTime
  userId String?
  user User?  @relation(fields: [userId], references: [id])

 
  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Project {
  id        String   @id @default(cuid())
  adminId   String?
  description   String?
  createdAt DateTime @default(now())
  name      String?
  image     String?
  userId    String[]
  users     User[]   @relation("UserProjects")
  documents Document[] // Документы, привязанные к проекту
}



enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Document {
  id        String   @id @default(cuid())
  title     String
  url       String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
}



enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
